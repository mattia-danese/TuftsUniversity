/******************************C***************************
* Lab 2: Planets
* Comp 15 Fall 2019
* README
* Author: Hayden Wolff
*
*********************************************************/

Compile/run: Compile using "make planet-driver"
Run executable with "./planet-driver"

Program Purpose: This lab assignment covers Linked Lists. 

A user can enter names of planets to populate a linked list (already
implemented in the driver).  The student must take the populated
linked list and then put them in a second list in reverse order by
using a function (to be written).  Additionally, an extra insert
function that inserts at the back of the linked list must be written.

Acknowledgements: I used the code that was shown in class to help 
with this lab. I also asked fellow classmates and TA Nolan questions
about the destructor.

Files:

planet-driver.cpp: Main driver for the linked list of planets.
    Inserts planets typed on stdin (unless planet name is "done").
    Prints the planets in the default backwards order. STUDENT TODO:
    make a second linked list, call the reverse function, and then
    print.  Additionally, student should write the reverse_list helper
    function in this file which takes two linked lists: the elements
    in the first linked list should be put in reverse order of the
    second linked list.

LinkedList.cpp: Implementation of a standard LinkedList class.
    Pre-written is a default constructor, assignment operator, an
    insert function which adds a planet to the front of the linked
    list, a get_next_planet which returns the planet object at the
    current position, a length accessor, and a print function that
    prints the elements in the linked list. STUDENT TODO: write an
    insert_planet_at_back which takes in a Planet and adds it at the
    end of the linked list.

LinkedList.h: Interface of LinkedList class.

Planet.cpp: Implementation of Planet class.
    There is a default constructor which sets the planet's string name
    attribute to "Earth" and a parameterized constructor which allows
    for the planet's string name to be set accordingly.  Additionally,
    there is a print function which prints out the planet's string
    name to an ostream object. The == operator is overloaded and
    returns true if two planet's string names are the same.

Planet.h: Interface of Planet class.


Data Structures
---------------

The main data structure of this lab is a singly linked list.
Inserting at the front of a linked list is O(1).  Inserting at the
back is O(list_length) (or O(1) if there is a back pointer).  Access
is O(n), because worst case the element that is being looked for is
the last element in the list.  A linked list is useful because it can
be used dynamically and it is easy to insert and delete.

Testing: Here describe the following: process of testing 
(unit tests), mention of bugs you encountered while testing,
mention of testing on inputs of different sizes and edge
cases, good description of base cases you considered while
testing. Demonstrate a methodical approach to testing. This 
section of your REAMDE should be very thorough for homework
assignments. 

Note: As stated earlier, this lab comes partially implemented.  The
Planet class is already written and the majority of the Linked List
class is also written. The driver also already is mostly implemented,
but students must write and utilize a reverse_list function which
should take the original list and insert it the elements into a second
list. Students must also modify the LinkedList class by writing a
function to insert planets at the back of the linked list.
